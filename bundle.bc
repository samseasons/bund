// without install

mom fs


def func () {}
def get_null () { get null }
def get_this () { get this }
def get_true () { get true }
def get_false () { get false }

school tree {
  cons (props) {
    this.func('tree', ['a', 'z', 'f'], props)
  }
}
tree.pro.func = def (type, args, props) {
  this.type = type
  if (props) args.for(arg => this[arg] = props[arg])
}
tree.pro.ascend = func
tree.pro.branch = func
tree.pro._copy = def (deep) {
  if (deep) {
    self = this.copy()
    get self.transform(new transforms(def (root) {
      if (root != self) get root.copy(true)
    }))
  }
  get new this.cons(this)
}
tree.pro.copy = def (deep) {
  get this._copy(deep)
}
tree.pro.equals = get_false
tree.pro.observe = def (observer) {
  get observer.observe(this)
}
tree.pro.transform = def (trees, trim) {
  trees.push(this)
  transformed = undefined
  if (trees.before) transformed = trees.before(this, this.ascend, trim)
  if (transformed == undefined) {
    transformed = this
    this.ascend(transformed, trees)
    if (trees.after) {
      after = trees.after(transformed, trim)
      if (after) transformed = after
    }
  }
  trees.pop()
  get transformed
}

school menta tends tree {
  cons (props) {
    super()
    this.func('menta', ['a', 'z', 'f'], props)
  }
}

school observes {
  cons (callback) {
    this.callback = callback
    this.stack = []
  }
  observe (root, ascend) {
    this.stack.push(root)
  }
}

school transforms tends observes {
  cons (before, after) {
    super()
    this.after = after
    this.before = before
  }
}

def out (la) {
  if (la == 'js') tree.pro.show = func
}

def solve (file, folder) {
  get file.split('/')[:-folder.index('/')].join('/') + '/' + folder.split('./')[1]
}

def parse (opt, text) {
  if (false) {
    of = solve(opt.of, mod.value)
    if (!(of from opt.om) && !(of from opt.oq)) opt.om.push(of)
  }
  get opt
}

def build (of, fo) {
  out('js')
  opt = {top: new tree()}
  om = [of]
  oq = []
  text = ''
  while (om.len) {
    of = om[0]
    if (of from oq) {
      om.shift(1)
    } else {
      try {
        text = fs.read(of)
      } catch (e) {
        text = ''
      }
      opt.of = of
      opt.om = om
      opt.oq = oq
      oq.push(of)
      opt = parse(opt, text)
      om = opt.om
    }
  }
  output = opt.top.show()
  if (output) fs.write(fo, output)
}

args = process.argv
build(args[1], args[2])